package binarytree;

import java.util.Stack;

public class BinaryTreePreOrder {
    private TreeNode root; //hold all the other nodes of binary tree.
    private class TreeNode{
        private TreeNode left;
        private TreeNode right;
        private int data;//Generic type.
        public TreeNode(int data){
            this.data = data;
        }
    }
    public void createBinaryTree(){
        TreeNode first = new TreeNode(9);
        TreeNode second = new TreeNode(2);
        TreeNode third = new TreeNode(3);
        TreeNode fourth = new TreeNode(4);
        TreeNode fifth = new TreeNode(5);
        TreeNode sixth = new TreeNode(1);
        TreeNode seventh = new TreeNode(7);

        root = first; //root--->first
        first.left = second;
        first.right = third;//second<---first--->third

        second.left = fourth;
        second.right = sixth;
        third.left = fifth;
        third.right = seventh;
    }
   // Using Recursive method.
    public void preOrder(TreeNode root){
        if(root == null){
            return;
        }
        System.out.print(root.data + " ");
        preOrder(root.left);
        preOrder(root.right);
    }
   //Using Iterative method.
    public void preOrder(){
        if(root == null){
            return;
        }
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);

        while(!stack.isEmpty()){
            TreeNode temp = stack.pop();
            System.out.print(temp.data + " ");
            if(temp.right!=null){
                stack.push(temp.right);
            }
            if(temp.left!=null){
                stack.push(temp.left);
            }
        }
    }
    public static void main(String[] args) {
        BinaryTreePreOrder binaryTree = new BinaryTreePreOrder();
        binaryTree.createBinaryTree();
        binaryTree.preOrder(binaryTree.root); //for recursive method.
        binaryTree.preOrder();//for iterative method.
    }
}
